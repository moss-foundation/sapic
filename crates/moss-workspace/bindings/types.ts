// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.
import { ChangeJsonValue, ChangePath, ChangeString, JsonValue } from "@repo/moss-bindingutils";
import { FileStatus } from "@repo/moss-git";
import type { ActivitybarPosition, EditorGridOrientation, PanelRenderer, SidebarPosition } from "./primitives";

/**
 * @category Type
 */
export type ActivitybarItemStateInfo = { id: string; order: number; visible: boolean };

/**
 * @category Type
 */
export type ActivitybarPartStateInfo = {
  lastActiveContainerId?: string;
  position: ActivitybarPosition;
  items: Array<ActivitybarItemStateInfo>;
};

/**
 * @category Type
 */
export type AddVariableParams = {
  name: string;
  globalValue: JsonValue;
  localValue: JsonValue;
  order: number;
  desc?: string;
  options: VariableOptions;
};

/**
 * @category Type
 */
export type BranchInfo = { name: string; ahead?: number; behind?: number };

export type Contributor = { name: string; avatarUrl?: string };

/**
 * @category Type
 */
export type CreateProjectGitParams = { "gitHub": GitHubCreateParams } | { "gitLab": GitLabCreateParams };

/**
 * @category Type
 */
export type CreateProjectParams = {
  name: string;
  order: number;
  externalPath?: string;
  gitParams?: CreateProjectGitParams;
  iconPath?: string;
};

/**
 * @category Type
 */
export type EditorGridLeafData = { views: Array<string>; activeView: string; id: string };

/**
 * @category Type
 */
export type EditorGridNode =
  | { "type": "branch"; data: Array<EditorGridNode>; size: number }
  | { "type": "leaf"; data: EditorGridLeafData; size: number };

/**
 * @category Type
 */
export type EditorGridState = {
  root: EditorGridNode;
  width: number;
  height: number;
  orientation: EditorGridOrientation;
};

/**
 * @category Type
 */
export type EditorPanelState = {
  id: string;
  contentComponent?: string;
  tabComponent?: string;
  title?: string;
  renderer?: PanelRenderer;
  params: { [key: string]: JsonValue };
  minimumWidth?: number;
  minimumHeight?: number;
  maximumWidth?: number;
  maximumHeight?: number;
};

/**
 * @category Type
 */
export type EditorPartStateInfo = {
  grid: EditorGridState;
  panels: Record<string, EditorPanelState>;
  activeGroup?: string;
};

export type EntryChange = { projectId: string; path: string; status: FileStatus };

/**
 * @category Type
 */
export type EnvironmentGroup = { projectId: string; expanded: boolean; order?: number };

/**
 * @category Type
 */
export type EnvironmentInfo = {
  id: string;
  projectId?: string;
  name: string;
  displayName: string;
  order: number;
  color?: string;
  variables: Array<VariableInfo>;
};

export type ExportProjectParams = {
  id: string;
  /**
   * Path to the folder containing the output archive file
   */
  destination: string;
};

/**
 * @category Type
 */
export type GitHubCreateParams = {
  repository: string;
  /**
   * The name of the default branch
   */
  branch: string;
};

export type GitHubVcsInfo = { branch: BranchInfo; url: string; updatedAt?: string; owner?: string };

/**
 * @category Type
 */
export type GitLabCreateParams = {
  repository: string;
  /**
   * The name of the default branch
   */
  branch: string;
};

export type GitLabVcsInfo = { branch: BranchInfo; url: string; updatedAt?: string; owner?: string };

/**
 * @category Type
 */
export type ImportArchiveParams = { archivePath: string };

/**
 * @category Type
 */
export type ImportDiskParams = { externalPath: string };

/**
 * @category Type
 */
export type ImportGitHubParams = {
  accountId: string;
  repository: string;
  /**
   * If provided, this branch will be checked out instead of the default branch
   */
  branch?: string;
};

/**
 * @category Type
 */
export type ImportGitLabParams = {
  accountId: string;
  repository: string;
  /**
   * If provided, this branch will be checked out instead of the default branch
   */
  branch?: string;
};

export type ImportProjectParams = { name: string; order: number; source: ImportProjectSource; iconPath?: string };

/**
 * @category Type
 */
export type ImportProjectSource =
  | { "gitHub": ImportGitHubParams }
  | { "gitLab": ImportGitLabParams }
  | { "archive": ImportArchiveParams }
  | { "disk": ImportDiskParams };

/**
 * @category Type
 */
export type Layouts = {
  editor?: EditorPartStateInfo;
  sidebar?: SidebarPartStateInfo;
  panel?: PanelPartStateInfo;
  activitybar?: ActivitybarPartStateInfo;
};

/**
 * @category Type
 */
export type PanelPartStateInfo = { size: number; visible: boolean };

/**
 * @category Type
 */
export type SidebarPartStateInfo = { position: SidebarPosition; size: number; visible: boolean };

/**
 * @category Type
 */
export type UpdateEnvironmentGroupParams = { projectId: string; expanded?: boolean; order?: number };

/**
 * @category Type
 */
export type UpdateEnvironmentParams = {
  id: string;
  name?: string;
  order?: number;
  color?: ChangeString;
  expanded?: boolean;
  varsToAdd: Array<AddVariableParams>;
  varsToUpdate: Array<UpdateVariableParams>;
  varsToDelete: Array<string>;
};

/**
 * @category Type
 */
export type UpdateProjectParams = {
  id: string;
  name?: string;
  repository?: ChangeString;
  iconPath?: ChangePath;
  order?: number;
  expanded?: boolean;
};

/**
 * @category Type
 */
export type UpdateVariableParams = {
  id: string;
  name?: string;
  globalValue?: ChangeJsonValue;
  localValue?: ChangeJsonValue;
  order?: number;
  desc?: ChangeString;
  options?: VariableOptions;
};

/**
 * @category Type
 */
export type VariableInfo = {
  id: string;
  name: string;
  globalValue?: JsonValue;
  localValue?: JsonValue;
  disabled: boolean;
  order?: number;
  desc?: string;
};

/**
 * @category Type
 */
export type VariableOptions = { disabled: boolean };

/**
 * @category Type
 */
export type VcsInfo = { "gitHub": GitHubVcsInfo } | { "gitLab": GitLabVcsInfo };
