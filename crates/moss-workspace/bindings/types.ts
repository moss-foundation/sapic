// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.
import { ChangeJsonValue, ChangePath, ChangeString, JsonValue } from "@repo/moss-bindingutils";
import type {
  ActivitybarPosition,
  ChangeCollectionId,
  EditorGridOrientation,
  PanelRenderer,
  SidebarPosition,
} from "./primitives";

/**
 * @category Type
 */
export type ActivitybarItemStateInfo = { id: string; order: number; visible: boolean };

/**
 * @category Type
 */
export type ActivitybarPartStateInfo = {
  lastActiveContainerId?: string;
  position: ActivitybarPosition;
  items: Array<ActivitybarItemStateInfo>;
};

/**
 * @category Type
 */
export type AddVariableParams = {
  name: string;
  globalValue: JsonValue;
  localValue: JsonValue;
  order: number;
  desc?: string;
  options: VariableOptions;
};

/**
 * @category Type
 */
export type CollectionInfo = { id: string; displayName: string; order?: number };

/**
 * @category Type
 */
export type Contributor = { name: string; avatar_url: string };

/**
 * @category Type
 */
export type CreateCollectionGitParams = { "gitHub": GitHubCreateParams } | { "gitLab": GitLabCreateParams };

/**
 * @category Type
 */
export type CreateCollectionParams = {
  name: string;
  order: number;
  externalPath?: string;
  gitParams?: CreateCollectionGitParams;
  iconPath?: string;
};

/**
 * @category Type
 */
export type EditorGridLeafData = { views: Array<string>; activeView: string; id: string };

/**
 * @category Type
 */
export type EditorGridNode =
  | { "type": "branch"; data: Array<EditorGridNode>; size: number }
  | { "type": "leaf"; data: EditorGridLeafData; size: number };

/**
 * @category Type
 */
export type EditorGridState = {
  root: EditorGridNode;
  width: number;
  height: number;
  orientation: EditorGridOrientation;
};

/**
 * @category Type
 */
export type EditorPanelState = {
  id: string;
  contentComponent?: string;
  tabComponent?: string;
  title?: string;
  renderer?: PanelRenderer;
  params: { [key: string]: JsonValue };
  minimumWidth?: number;
  minimumHeight?: number;
  maximumWidth?: number;
  maximumHeight?: number;
};

/**
 * @category Type
 */
export type EditorPartStateInfo = {
  grid: EditorGridState;
  panels: Record<string, EditorPanelState>;
  activeGroup?: string;
};

/**
 * @category Type
 */
export type EnvironmentGroup = { collectionId: string; expanded: boolean; order?: number };

/**
 * @category Type
 */
export type EnvironmentInfo = {
  id: string;
  collectionId?: string;
  name: string;
  displayName: string;
  order: number;
  color?: string;
  variables: Array<VariableInfo>;
};

/**
 * @category Type
 */
export type GitHubCreateParams = {
  repository: string;
  /**
   * The name of the default branch
   */
  branch: string;
};

/**
 * @category Type
 */
export type GitHubImportParams = {
  repository: string;
  /**
   * If provided, this branch will be checked out instead of the default branch
   */
  branch?: string;
};

/**
 * @category Type
 */
export type GitLabCreateParams = {
  repository: string;
  /**
   * The name of the default branch
   */
  branch: string;
};

/**
 * @category Type
 */
export type GitLabImportParams = {
  repository: string;
  /**
   * If provided, this branch will be checked out instead of the default branch
   */
  branch?: string;
};

export type ImportCollectionParams = {
  name: string;
  order: number;
  externalPath?: string;
  source: ImportCollectionSource;
  iconPath?: string;
};

/**
 * @category Type
 */
export type ImportCollectionSource = { "gitHub": GitHubImportParams } | { "gitLab": GitLabImportParams };

/**
 * @category Type
 */
export type PanelPartStateInfo = { size: number; visible: boolean };

/**
 * @category Type
 */
export type RepositoryInfo = {
  /**
   * A timestamp like 2024-10-05T12:19:15Z
   */
  createdAt: string;
  updatedAt: string;
  owner: string;
};

/**
 * @category Type
 */
export type SidebarPartStateInfo = { position: SidebarPosition; size: number; visible: boolean };

/**
 * @category Type
 */
export type UpdateCollectionParams = {
  id: string;
  name?: string;
  repository?: ChangeString;
  iconPath?: ChangePath;
  order?: number;
  expanded?: boolean;
};

/**
 * @category Type
 */
export type UpdateEnvironmentGroupParams = { collectionId: string; expanded?: boolean; order?: number };

/**
 * @category Type
 */
export type UpdateEnvironmentParams = {
  id: string;
  /**
   * When updating an environment, we can move it to another collection
   * or remove its link to a specific collection to make it global.
   */
  collectionId?: ChangeCollectionId;
  name?: string;
  order?: number;
  color?: ChangeString;
  expanded?: boolean;
  varsToAdd: Array<AddVariableParams>;
  varsToUpdate: Array<UpdateVariableParams>;
  varsToDelete: Array<string>;
};

/**
 * @category Type
 */
export type UpdateVariableParams = {
  id: string;
  name?: string;
  globalValue?: ChangeJsonValue;
  localValue?: ChangeJsonValue;
  order?: number;
  desc?: ChangeString;
  options?: VariableOptions;
};

/**
 * @category Type
 */
export type VariableInfo = {
  id: string;
  name: string;
  globalValue?: JsonValue;
  localValue?: JsonValue;
  disabled: boolean;
  order?: number;
  desc?: string;
};

/**
 * @category Type
 */
export type VariableOptions = { disabled: boolean };
