// Generated by ts-to-zod
import { z } from "zod";

import { changeJsonValueSchema, changePathSchema, changeStringSchema, jsonValueSchema } from "@repo/moss-bindingutils";
import {
  activitybarPositionSchema,
  changeCollectionIdSchema,
  editorGridOrientationSchema,
  panelRendererSchema,
  sidebarPositionSchema,
} from "./primitives.zod";
import { type EditorGridNode } from "./types";

export const activitybarItemStateInfoSchema = z.object({
  id: z.string(),
  order: z.number(),
  visible: z.boolean(),
});

export const variableOptionsSchema = z.object({
  disabled: z.boolean(),
});

export const collectionInfoSchema = z.object({
  id: z.string(),
  displayName: z.string(),
  order: z.number().optional(),
});

export const contributorSchema = z.object({
  name: z.string(),
  avatar_url: z.string(),
});

export const editorGridLeafDataSchema = z.object({
  views: z.array(z.string()),
  activeView: z.string(),
  id: z.string(),
});

export const editorGridNodeSchema: z.ZodSchema<EditorGridNode> = z.lazy(() =>
  z.union([
    z.object({
      "type": z.literal("branch"),
      data: z.array(editorGridNodeSchema),
      size: z.number(),
    }),
    z.object({
      "type": z.literal("leaf"),
      data: editorGridLeafDataSchema,
      size: z.number(),
    }),
  ])
);

export const environmentGroupSchema = z.object({
  collectionId: z.string(),
  expanded: z.boolean(),
  order: z.number().optional(),
});

export const gitHubImportParamsSchema = z.object({
  order: z.number(),
  repository: z.string(),
});

export const gitLabImportParamsSchema = z.object({
  order: z.number(),
  repository: z.string(),
});

export const panelPartStateInfoSchema = z.object({
  size: z.number(),
  visible: z.boolean(),
});

export const repositoryInfoSchema = z.object({
  createdAt: z.string(),
  updatedAt: z.string(),
  owner: z.string(),
});

export const updateEnvironmentGroupParamsSchema = z.object({
  collectionId: z.string(),
  expanded: z.boolean().optional(),
  order: z.number().optional(),
});
export const activitybarPartStateInfoSchema = z.object({
  lastActiveContainerId: z.string().optional(),
  position: activitybarPositionSchema,
  items: z.array(activitybarItemStateInfoSchema),
});

export const addVariableParamsSchema = z.object({
  name: z.string(),
  globalValue: jsonValueSchema,
  localValue: jsonValueSchema,
  order: z.number(),
  desc: z.string().optional(),
  options: variableOptionsSchema,
});

export const editorGridStateSchema = z.object({
  root: editorGridNodeSchema,
  width: z.number(),
  height: z.number(),
  orientation: editorGridOrientationSchema,
});

export const editorPanelStateSchema = z.object({
  id: z.string(),
  contentComponent: z.string().optional(),
  tabComponent: z.string().optional(),
  title: z.string().optional(),
  renderer: panelRendererSchema.optional(),
  params: z.record(jsonValueSchema),
  minimumWidth: z.number().optional(),
  minimumHeight: z.number().optional(),
  maximumWidth: z.number().optional(),
  maximumHeight: z.number().optional(),
});

export const editorPartStateInfoSchema = z.object({
  grid: editorGridStateSchema,
  panels: z.record(editorPanelStateSchema),
  activeGroup: z.string().optional(),
});

export const variableInfoSchema = z.object({
  id: z.string(),
  name: z.string(),
  globalValue: jsonValueSchema.optional(),
  localValue: jsonValueSchema.optional(),
  disabled: z.boolean(),
  order: z.number().optional(),
  desc: z.string().optional(),
});

export const sidebarPartStateInfoSchema = z.object({
  position: sidebarPositionSchema,
  size: z.number(),
  visible: z.boolean(),
});

export const updateCollectionParamsSchema = z.object({
  id: z.string(),
  name: z.string().optional(),
  repository: changeStringSchema.optional(),
  iconPath: changePathSchema.optional(),
  order: z.number().optional(),
  expanded: z.boolean().optional(),
});

export const updateVariableParamsSchema = z.object({
  id: z.string(),
  name: z.string().optional(),
  globalValue: changeJsonValueSchema.optional(),
  localValue: changeJsonValueSchema.optional(),
  order: z.number().optional(),
  desc: changeStringSchema.optional(),
  options: variableOptionsSchema.optional(),
});

export const environmentInfoSchema = z.object({
  id: z.string(),
  collectionId: z.string().optional(),
  name: z.string(),
  displayName: z.string(),
  order: z.number(),
  color: z.string().optional(),
  variables: z.array(variableInfoSchema),
});

export const updateEnvironmentParamsSchema = z.object({
  id: z.string(),
  collectionId: changeCollectionIdSchema.optional(),
  name: z.string().optional(),
  order: z.number().optional(),
  color: changeStringSchema.optional(),
  expanded: z.boolean().optional(),
  varsToAdd: z.array(addVariableParamsSchema),
  varsToUpdate: z.array(updateVariableParamsSchema),
  varsToDelete: z.array(z.string()),
});
