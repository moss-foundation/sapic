// Generated by ts-to-zod
import { z } from "zod";

import { jsonValueSchema, resourceKeySchema } from "@repo/bindings-utils";
import { type EditorGridNode } from "./types";

export const editorGridLeafDataSchema = z.object({
  views: z.array(z.string()),
  activeView: z.string(),
  id: z.string(),
});

export const editorGridNodeSchema: z.ZodSchema<EditorGridNode> = z.lazy(() =>
  z.union([
    z.object({
      "type": z.literal("branch"),
      data: z.array(editorGridNodeSchema),
      size: z.number(),
    }),
    z.object({
      "type": z.literal("leaf"),
      data: editorGridLeafDataSchema,
      size: z.number(),
    }),
  ])
);

export const editorGridOrientationSchema = z.union([z.literal("HORIZONTAL"), z.literal("VERTICAL")]);

export const editorGridStateSchema = z.object({
  root: editorGridNodeSchema,
  width: z.number(),
  height: z.number(),
  orientation: editorGridOrientationSchema,
});

export const panelRendererSchema = z.union([z.literal("onlyWhenVisible"), z.literal("always")]);

export const panelPartStateSchema = z.object({
  preferredSize: z.number(),
  isVisible: z.boolean(),
});

export const sidebarPartStateSchema = z.object({
  preferredSize: z.number(),
  isVisible: z.boolean(),
});

export const workspaceModeSchema = z.union([z.literal("DESIGN_FIRST"), z.literal("REQUEST_FIRST")]);
export const collectionInfoSchema = z.object({
  key: resourceKeySchema,
  name: z.string(),
  order: z.number().optional(),
});

export const editorPanelStateSchema = z.object({
  id: z.string(),
  contentComponent: z.string().optional(),
  tabComponent: z.string().optional(),
  title: z.string().optional(),
  renderer: panelRendererSchema.optional(),
  params: z.record(jsonValueSchema).optional(),
  minimumWidth: z.number().optional(),
  minimumHeight: z.number().optional(),
  maximumWidth: z.number().optional(),
  maximumHeight: z.number().optional(),
});

export const editorPartStateSchema = z.object({
  grid: editorGridStateSchema,
  panels: z.record(editorPanelStateSchema),
  activeGroup: z.string().optional(),
});

export const environmentInfoSchema = z.object({
  key: resourceKeySchema,
  collectionKey: resourceKeySchema.optional(),
  name: z.string(),
  order: z.number().optional(),
});
