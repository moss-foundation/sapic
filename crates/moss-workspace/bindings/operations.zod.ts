// Generated by ts-to-zod
import { changePathSchema, changeStringSchema } from "@repo/moss-bindingutils";
import { z } from "zod";
import {
  activitybarPartStateInfoSchema,
  addVariableParamsSchema,
  contributorSchema,
  createCollectionGitParamsSchema,
  editorPartStateInfoSchema,
  environmentGroupSchema,
  importCollectionSourceSchema,
  panelPartStateInfoSchema,
  sidebarPartStateInfoSchema,
  updateCollectionParamsSchema,
  updateEnvironmentGroupParamsSchema,
  updateEnvironmentParamsSchema,
  updateVariableParamsSchema,
  variableInfoSchema,
  vcsInfoSchema,
} from "./types.zod";

export const activateEnvironmentInputSchema = z.object({
  environmentId: z.string(),
  groupId: z.string().optional(),
});

export const activateEnvironmentOutputSchema = z.object({
  environmentId: z.string(),
});

export const archiveCollectionInputSchema = z.object({
  id: z.string(),
});

export const archiveCollectionOutputSchema = z.object({
  id: z.string(),
});

export const batchUpdateCollectionOutputSchema = z.object({
  ids: z.array(z.string()),
});

export const batchUpdateEnvironmentOutputSchema = z.object({
  ids: z.array(z.string()),
});

export const createCollectionOutputSchema = z.object({
  id: z.string(),
  name: z.string(),
  order: z.number().optional(),
  expanded: z.boolean(),
  iconPath: z.string().optional(),
});

export const createEnvironmentOutputSchema = z.object({
  id: z.string(),
  collectionId: z.string().optional(),
  name: z.string(),
  order: z.number().optional(),
  color: z.string().optional(),
});

export const deleteCollectionInputSchema = z.object({
  id: z.string(),
});

export const deleteCollectionOutputSchema = z.object({
  id: z.string(),
});

export const deleteEnvironmentInputSchema = z.object({
  id: z.string(),
});

export const deleteEnvironmentOutputSchema = z.object({
  id: z.string(),
});

export const describeCollectionInputSchema = z.object({
  id: z.string(),
});

export const describeEnvironmentInputSchema = z.object({
  id: z.string(),
});

export const exportCollectionInputSchema = z.object({
  id: z.string(),
  destination: z.string(),
});

export const exportCollectionOutputSchema = z.object({
  archivePath: z.string(),
});

export const importCollectionOutputSchema = z.object({
  id: z.string(),
  name: z.string(),
  order: z.number().optional(),
  expanded: z.boolean(),
  iconPath: z.string().optional(),
});

export const streamCollectionsOutputSchema = z.object({});

export const unarchiveCollectionInputSchema = z.object({
  id: z.string(),
});

export const unarchiveCollectionOutputSchema = z.object({
  id: z.string(),
});

export const updateCollectionOutputSchema = z.object({
  id: z.string(),
});

export const updateEnvironmentGroupInputSchema = z.object({
  collectionId: z.string(),
  expanded: z.boolean().optional(),
  order: z.number().optional(),
});

export const updateEnvironmentOutputSchema = z.object({
  id: z.string(),
});
export const batchUpdateCollectionInputSchema = z.object({
  items: z.array(updateCollectionParamsSchema),
});

export const batchUpdateEnvironmentGroupInputSchema = z.object({
  items: z.array(updateEnvironmentGroupParamsSchema),
});

export const batchUpdateEnvironmentInputSchema = z.object({
  items: z.array(updateEnvironmentParamsSchema),
});

export const createCollectionInputSchema = z.object({
  name: z.string(),
  order: z.number(),
  externalPath: z.string().optional(),
  gitParams: createCollectionGitParamsSchema.optional(),
  iconPath: z.string().optional(),
});

export const createEnvironmentInputSchema = z.object({
  collectionId: z.string().optional(),
  name: z.string(),
  order: z.number(),
  color: z.string().optional(),
  variables: z.array(addVariableParamsSchema),
});

export const describeCollectionOutputSchema = z.object({
  name: z.string(),
  vcs: vcsInfoSchema.optional(),
  contributors: z.array(contributorSchema),
  createdAt: z.string(),
});

export const describeEnvironmentOutputSchema = z.object({
  variables: variableInfoSchema,
});

export const describeStateOutputSchema = z.object({
  editor: editorPartStateInfoSchema.optional(),
  sidebar: sidebarPartStateInfoSchema.optional(),
  panel: panelPartStateInfoSchema.optional(),
  activitybar: activitybarPartStateInfoSchema.optional(),
});

export const importCollectionInputSchema = z.object({
  name: z.string(),
  order: z.number(),
  externalPath: z.string().optional(),
  source: importCollectionSourceSchema,
  iconPath: z.string().optional(),
});

export const streamEnvironmentsOutputSchema = z.object({
  groups: z.array(environmentGroupSchema),
});

export const updateCollectionInputSchema = z.object({
  id: z.string(),
  name: z.string().optional(),
  repository: changeStringSchema.optional(),
  iconPath: changePathSchema.optional(),
  order: z.number().optional(),
  expanded: z.boolean().optional(),
});

export const updateEnvironmentInputSchema = z.object({
  id: z.string(),
  name: z.string().optional(),
  order: z.number().optional(),
  color: changeStringSchema.optional(),
  expanded: z.boolean().optional(),
  varsToAdd: z.array(addVariableParamsSchema),
  varsToUpdate: z.array(updateVariableParamsSchema),
  varsToDelete: z.array(z.string()),
});

export const updateStateInputSchema = z.union([
  z.object({
    "updateEditorPartState": editorPartStateInfoSchema,
  }),
  z.object({
    "updateSidebarPartState": sidebarPartStateInfoSchema,
  }),
  z.object({
    "updatePanelPartState": panelPartStateInfoSchema,
  }),
  z.object({
    "updateActivitybarPartState": activitybarPartStateInfoSchema,
  }),
]);
