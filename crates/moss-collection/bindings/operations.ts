// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.
import { ResourceKey } from "@repo/bindings-utils";
import type {
  EntryId,
  HeaderParamItem,
  HttpMethod,
  PathChangeKind,
  PathParamItem,
  QueryParamItem,
  RequestBody,
  RequestNodeInfo,
} from "./types";

export type CreateRequestDirEntryInput = { destination: string };

export type CreateRequestDirEntryOutput = { changedPaths: Array<[string, EntryId, PathChangeKind]> };

export type CreateRequestEntryInput = {
  destination: string;
  url?: string;
  payload?: CreateRequestProtocolSpecificPayload;
};

export type CreateRequestEntryOutput = { changedPaths: Array<[string, EntryId, PathChangeKind]> };

export type CreateRequestGroupInput = { path: string };

export type CreateRequestGroupOutput = { key: ResourceKey };

/**
 * All the path and file names passed in the input should be unencoded.
 * For example, a name of "workspace.name" will be encoded as "workspace%2Ename"
 * The frontend should simply use the name and path used in the user's original input
 */
export type CreateRequestProtocolSpecificPayload = {
  "http": {
    method: HttpMethod;
    query_params: Array<QueryParamItem>;
    path_params: Array<PathParamItem>;
    headers: Array<HeaderParamItem>;
    body: RequestBody | null;
  };
};

export type DeleteRequestDirEntryInput = { id: EntryId };

export type DeleteRequestDirEntryOutput = { changedPaths: Array<[string, EntryId, PathChangeKind]> };

export type DeleteRequestGroupInput = { key: ResourceKey };

export type DeleteRequestInput = { key: ResourceKey };

export type ListRequestsOutput = Array<RequestNodeInfo>;

export type RenameRequestGroupInput = { key: ResourceKey; newName: string };

export type RenameRequestGroupOutput = { key: ResourceKey; affectedItems: Array<ResourceKey> };

export type RenameRequestInput = { key: ResourceKey; newName: string };

export type StreamEntriesByPrefixesInput = Array<string>;

export type UpdateRequestDirEntryInput = {
  id: EntryId;
  /**
   * A new name for the directory, if provided,
   * the directory will be renamed to this name.
   */
  name?: string;
};

export type UpdateRequestDirEntryOutput = { changedPaths: Array<[string, EntryId, PathChangeKind]> };
