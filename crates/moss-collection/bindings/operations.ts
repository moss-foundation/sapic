// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.
import type {
  AfterUpdateDirEntryDescription,
  AfterUpdateItemEntryDescription,
  DirConfigurationModel,
  ItemConfigurationModel,
  UpdateDirEntryParams,
  UpdateItemEntryParams,
} from "./types";

export type BatchUpdateEntryInput = { entries: Array<BatchUpdateEntryKind> };

export type BatchUpdateEntryKind = { "ITEM": UpdateItemEntryParams } | { "DIR": UpdateDirEntryParams };

export type BatchUpdateEntryOutput = Record<string, never>;

export type BatchUpdateEntryOutputKind =
  | { "ITEM": AfterUpdateItemEntryDescription }
  | { "DIR": AfterUpdateDirEntryDescription };

export type CreateDirEntryInput = { path: string; name: string; order: number; configuration: DirConfigurationModel };

export type CreateEntryInput = { "item": CreateItemEntryInput } | { "dir": CreateDirEntryInput };

export type CreateEntryOutput = { id: string };

export type CreateItemEntryInput = { path: string; name: string; order: number; configuration: ItemConfigurationModel };

export type DeleteEntryInput = { id: string };

export type DeleteEntryOutput = { id: string };

export type StreamEntriesInput = {
  /**
   * The list of paths to expand. Paths need to be relative to the collection root.
   * If empty, the default expansion directories will be used. Default expansion directories are:
   * - `requests`
   * - `endpoints`
   * - `components`
   * - `schemas`
   *
   * This might be useful for the frontend to only expand a specific path.
   */
  paths: Array<string>;
};

export type StreamEntriesOutput = Record<string, never>;

export type UpdateEntryInput = { "ITEM": UpdateItemEntryParams } | { "DIR": UpdateDirEntryParams };

export type UpdateEntryOutput = { "ITEM": AfterUpdateItemEntryDescription } | { "DIR": AfterUpdateDirEntryDescription };
