// Generated by ts-to-zod
import { z } from "zod";

export const classificationSchema = z.union([
  z.literal("request"),
  z.literal("endpoint"),
  z.literal("component"),
  z.literal("schema"),
]);

export const entryIdSchema = z.number();

export const entryKindSchema = z.union([
  z.literal("unit"),
  z.literal("unloadedDir"),
  z.literal("dir"),
  z.literal("file"),
]);

export const formDataValueSchema = z.union([
  z.object({
    "text": z.string(),
  }),
  z.object({
    "file": z.string(),
  }),
]);

export const formDataOptionsSchema = z.object({
  propagate: z.boolean(),
});

export const headerParamOptionsSchema = z.object({
  propagate: z.boolean(),
});

export const httpMethodSchema = z.union([z.literal("post"), z.literal("get"), z.literal("put"), z.literal("delete")]);

export const pathChangeKindSchema = z.union([
  z.literal("loaded"),
  z.literal("created"),
  z.literal("removed"),
  z.literal("updated"),
]);

export const pathParamOptionsSchema = z.object({
  propagate: z.boolean(),
});

export const queryParamOptionsSchema = z.object({
  propagate: z.boolean(),
});

export const rawBodyTypeSchema = z.union([
  z.object({
    "text": z.string(),
  }),
  z.object({
    "json": z.string(),
  }),
  z.object({
    "html": z.string(),
  }),
  z.object({
    "xml": z.string(),
  }),
]);

export const formDataItemSchema = z.object({
  key: z.string(),
  value: formDataValueSchema,
  order: z.number().optional(),
  desc: z.string().optional(),
  disabled: z.boolean(),
  options: formDataOptionsSchema,
});

export const requestProtocolSchema = z.union([
  z.object({
    "http": httpMethodSchema,
  }),
  z.literal("webSocket"),
  z.literal("graphQL"),
  z.literal("grpc"),
]);

export const urlEncodedOptionsSchema = z.object({
  propagate: z.boolean(),
});

export const entryInfoSchema = z.object({
  id: entryIdSchema,
  name: z.string(),
  path: z.string(),
  isDir: z.boolean(),
  classification: classificationSchema,
  protocol: requestProtocolSchema.nullable(),
  order: z.number().nullable(),
});

export const headerParamItemSchema = z.object({
  key: z.string(),
  value: z.string(),
  order: z.number().optional(),
  desc: z.string().optional(),
  disabled: z.boolean(),
  options: headerParamOptionsSchema,
});

export const pathParamItemSchema = z.object({
  key: z.string(),
  value: z.string(),
  order: z.number().optional(),
  desc: z.string().optional(),
  disabled: z.boolean(),
  options: pathParamOptionsSchema,
});

export const queryParamItemSchema = z.object({
  key: z.string(),
  value: z.string(),
  order: z.number().optional(),
  desc: z.string().optional(),
  disabled: z.boolean(),
  options: queryParamOptionsSchema,
});

export const urlEncodedItemSchema = z.object({
  key: z.string(),
  value: z.string(),
  order: z.number().optional(),
  desc: z.string().optional(),
  disabled: z.boolean(),
  options: urlEncodedOptionsSchema,
});

export const requestBodySchema = z.union([
  z.object({
    "raw": rawBodyTypeSchema,
  }),
  z.object({
    "formData": z.array(formDataItemSchema),
  }),
  z.object({
    "urlEncoded": z.array(urlEncodedItemSchema),
  }),
  z.object({
    "binary": z.string(),
  }),
]);
