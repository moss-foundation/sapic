// Generated by ts-to-zod
import { z } from "zod";
import {
  entryClassSchema,
  entryKindSchema,
  entryPathSchema,
  entryProtocolSchema,
  httpMethodSchema,
} from "./primitives.zod";

export const componentDirConfigurationModelSchema = z.record(z.never());

export const componentItemConfigurationModelSchema = z.record(z.never());

export const configurationMetadataSchema = z.object({
  id: z.string(),
});

export const schemaDirConfigurationModelSchema = z.record(z.never());

export const schemaItemConfigurationModelSchema = z.record(z.never());

export const dirHttpConfigurationModelSchema = z.record(z.never());

export const httpEndpointDirConfigurationSchema = z.record(z.never());

export const environmentInfoSchema = z.object({
  id: z.string(),
  name: z.string(),
  order: z.number().optional(),
});

export const expressionSchema = z.union([
  z.object({
    "string": z.string(),
  }),
  z.object({
    "variable": z.string(),
  }),
  z.object({
    "number": z.number(),
  }),
  z.object({
    "bool": z.boolean(),
  }),
]);

export const formDataValueSchema = z.union([
  z.object({
    "text": z.string(),
  }),
  z.object({
    "file": z.string(),
  }),
]);

export const formDataOptionsSchema = z.object({
  propagate: z.boolean(),
});

export const headerParamOptionsSchema = z.object({
  propagate: z.boolean(),
});

export const pathParamOptionsSchema = z.object({
  propagate: z.boolean(),
});

export const queryParamOptionsSchema = z.object({
  propagate: z.boolean(),
});

export const rawBodyTypeSchema = z.union([
  z.object({
    "text": z.string(),
  }),
  z.object({
    "json": z.string(),
  }),
  z.object({
    "html": z.string(),
  }),
  z.object({
    "xml": z.string(),
  }),
]);

export const formDataItemSchema = z.object({
  key: z.string(),
  value: formDataValueSchema,
  order: z.number().optional(),
  desc: z.string().optional(),
  disabled: z.boolean(),
  options: formDataOptionsSchema,
});

export const requestDirConfigurationModelSchema = z.object({
  "http": dirHttpConfigurationModelSchema,
});

export const updateDirEntryParamsSchema = z.object({
  id: z.string(),
  path: z.string().optional(),
  name: z.string().optional(),
  order: z.number().optional(),
  expanded: z.boolean().optional(),
});

export const urlEncodedOptionsSchema = z.object({
  propagate: z.boolean(),
});
export const endpointDirConfigurationModelSchema = z.object({
  "Http": httpEndpointDirConfigurationSchema,
});

export const dirConfigurationModelSchema = z.union([
  z.object({
    "request": requestDirConfigurationModelSchema,
  }),
  z.object({
    "endpoint": endpointDirConfigurationModelSchema,
  }),
  z.object({
    "component": componentDirConfigurationModelSchema,
  }),
  z.object({
    "schema": schemaDirConfigurationModelSchema,
  }),
]);

export const entryInfoSchema = z.object({
  id: z.string(),
  name: z.string(),
  path: entryPathSchema,
  class: entryClassSchema,
  kind: entryKindSchema,
  protocol: entryProtocolSchema.optional(),
  order: z.number().optional(),
  expanded: z.boolean(),
});

export const headerParamItemSchema = z.object({
  key: z.string(),
  value: expressionSchema.optional(),
  order: z.number().optional(),
  desc: z.string().optional(),
  disabled: z.boolean(),
  options: headerParamOptionsSchema,
});

export const httpRequestPartsSchema = z.object({
  method: httpMethodSchema,
});

export const itemHttpRequestConfigurationSchema = z.object({
  requestParts: httpRequestPartsSchema,
});

export const itemRequestConfigurationModelSchema = z.object({
  "http": itemHttpRequestConfigurationSchema,
});

export const pathParamItemSchema = z.object({
  key: z.string(),
  value: expressionSchema.optional(),
  order: z.number().optional(),
  desc: z.string().optional(),
  disabled: z.boolean(),
  options: pathParamOptionsSchema,
});

export const queryParamItemSchema = z.object({
  key: z.string(),
  value: expressionSchema.optional(),
  order: z.number().optional(),
  desc: z.string().optional(),
  disabled: z.boolean(),
  options: queryParamOptionsSchema,
});

export const urlEncodedItemSchema = z.object({
  key: z.string(),
  value: z.string(),
  order: z.number().optional(),
  desc: z.string().optional(),
  disabled: z.boolean(),
  options: urlEncodedOptionsSchema,
});

export const updateItemEntryParamsSchema = z.object({
  id: z.string(),
  path: z.string().optional(),
  name: z.string().optional(),
  protocol: entryProtocolSchema.optional(),
  order: z.number().optional(),
  expanded: z.boolean().optional(),
});

export const compositeDirConfigurationModelSchema = z
  .object({
    metadata: configurationMetadataSchema,
  })
  .and(
    z.union([
      z.object({
        "request": requestDirConfigurationModelSchema,
      }),
      z.object({
        "endpoint": endpointDirConfigurationModelSchema,
      }),
      z.object({
        "component": componentDirConfigurationModelSchema,
      }),
      z.object({
        "schema": schemaDirConfigurationModelSchema,
      }),
    ])
  );

export const httpEndpointItemConfigurationSchema = z.object({
  requestParts: httpRequestPartsSchema,
});

export const endpointItemConfigurationModelSchema = z.object({
  "Http": httpEndpointItemConfigurationSchema,
});

export const requestBodySchema = z.union([
  z.object({
    "raw": rawBodyTypeSchema,
  }),
  z.object({
    "formData": z.array(formDataItemSchema),
  }),
  z.object({
    "urlEncoded": z.array(urlEncodedItemSchema),
  }),
  z.object({
    "binary": z.string(),
  }),
]);

export const afterUpdateDirEntryDescriptionSchema = z.object({
  id: z.string(),
  path: entryPathSchema,
  configuration: compositeDirConfigurationModelSchema,
});

export const compositeItemConfigurationModelSchema = z
  .object({
    metadata: configurationMetadataSchema,
  })
  .and(
    z.union([
      z.object({
        "request": itemRequestConfigurationModelSchema,
      }),
      z.object({
        "endpoint": endpointItemConfigurationModelSchema,
      }),
      z.object({
        "component": componentItemConfigurationModelSchema,
      }),
      z.object({
        "schema": schemaItemConfigurationModelSchema,
      }),
    ])
  );

export const itemConfigurationModelSchema = z.union([
  z.object({
    "request": itemRequestConfigurationModelSchema,
  }),
  z.object({
    "endpoint": endpointItemConfigurationModelSchema,
  }),
  z.object({
    "component": componentItemConfigurationModelSchema,
  }),
  z.object({
    "schema": schemaItemConfigurationModelSchema,
  }),
]);

export const afterUpdateItemEntryDescriptionSchema = z.object({
  id: z.string(),
  path: entryPathSchema,
  configuration: compositeItemConfigurationModelSchema,
});
