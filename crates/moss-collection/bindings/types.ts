// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.
import type { EntryClass, EntryKind, EntryPath, EntryProtocol, HttpMethod } from "./primitives";

/**
 * @category Type
 */
export type AfterUpdateDirEntryDescription = {
  id: string;
  path: EntryPath;
  configuration: CompositeDirConfigurationModel;
};

/**
 * @category Type
 */
export type AfterUpdateItemEntryDescription = {
  id: string;
  path: EntryPath;
  configuration: CompositeItemConfigurationModel;
};

/**
 * @category Type
 */
export type ComponentDirConfigurationModel = Record<string, never>;

/**
 * @category Type
 */
export type ComponentItemConfigurationModel = Record<string, never>;

/**
 * @category Type
 */
export type CompositeDirConfigurationModel = { metadata: ConfigurationMetadata } & (
  | { "request": RequestDirConfigurationModel }
  | { "endpoint": EndpointDirConfigurationModel }
  | { "component": ComponentDirConfigurationModel }
  | { "schema": SchemaDirConfigurationModel }
);

/**
 * @category Type
 */
export type CompositeItemConfigurationModel = { metadata: ConfigurationMetadata } & (
  | { "request": ItemRequestConfigurationModel }
  | { "endpoint": EndpointItemConfigurationModel }
  | { "component": ComponentItemConfigurationModel }
  | { "schema": SchemaItemConfigurationModel }
);

/**
 * @category Type
 */
export type ConfigurationMetadata = { id: string };

/**
 * @category Type
 */
export type DirConfigurationModel =
  | { "request": RequestDirConfigurationModel }
  | { "endpoint": EndpointDirConfigurationModel }
  | { "component": ComponentDirConfigurationModel }
  | { "schema": SchemaDirConfigurationModel };

/**
 * @category Type
 */
export type DirHttpConfigurationModel = Record<string, never>;

/**
 * @category Type
 */
export type EndpointDirConfigurationModel = { "Http": HttpEndpointDirConfiguration };

/**
 * @category Type
 */
export type EndpointItemConfigurationModel = { "Http": HttpEndpointItemConfiguration };

/**
 * @category Type
 */
export type EntryInfo = {
  /**
   * Unique identifier for this entry
   */
  id: string;
  /**
   * Display name of the entry
   */
  name: string;
  /**
   * Path relative to the collection root.
   * Includes both the original path string and its segments.
   */
  path: EntryPath;
  /**
   * Classification of the entry (Request, Endpoint, Component, or Schema)
   */
  class: EntryClass;
  /**
   * Type of entry indicating its structure (Dir for directories, Item for files, Case of item cases)
   */
  kind: EntryKind;
  /**
   * HTTP protocol/method used by this entry, if applicable (GET, POST, PUT, DELETE, WebSocket, GraphQL, gRPC)
   */
  protocol?: EntryProtocol;
  /**
   * Determines the display position of this entry among others in the same group.
   * Entries are sorted in ascending order; lower values appear before higher ones.
   * Negative values are allowed and will be placed before positive values.
   * If multiple entries have the same order, they are sorted alphabetically.
   * If not specified, the entry appears last and is sorted alphabetically
   * among unspecified items.
   */
  order?: number;
  /**
   * Whether this entry is expanded in the tree view (applies to directories)
   */
  expanded: boolean;
};

/**
 * @category Type
 */
export type EnvironmentInfo = {
  id: string;
  name: string;
  /**
   * Determines the display position of this entry among others in the same group.
   * Entries are sorted in ascending order; lower values appear before higher ones.
   * Negative values are allowed and will be placed before positive values.
   * If multiple entries have the same order, they are sorted alphabetically.
   * If not specified, the entry appears last and is sorted alphabetically
   * among unspecified items.
   */
  order?: number;
};

/**
 * @category Type
 */
export type Expression =
  | "null"
  | { "string": string }
  | { "variable": string }
  | { "number": number }
  | { "bool": boolean };

/**
 * @category Type
 */
export type FormDataItem = {
  key: string;
  value: FormDataValue;
  order?: number;
  desc?: string;
  disabled: boolean;
  options: FormDataOptions;
};

/**
 * @category Type
 */
export type FormDataOptions = { propagate: boolean };

/**
 * @category Type
 */
export type FormDataValue = { "text": string } | { "file": string };

/**
 * @category Type
 */
export type HeaderParamItem = {
  key: string;
  value: Expression;
  order?: number;
  desc?: string;
  disabled: boolean;
  options: HeaderParamOptions;
};

/**
 * @category Type
 */
export type HeaderParamOptions = { propagate: boolean };

/**
 * @category Type
 */
export type HttpEndpointDirConfiguration = Record<string, never>;

/**
 * @category Type
 */
export type HttpEndpointItemConfiguration = { requestParts: HttpRequestParts };

/**
 * @category Type
 */
export type HttpRequestParts = { method: HttpMethod };

/**
 * @category Type
 */
export type ItemConfigurationModel =
  | { "request": ItemRequestConfigurationModel }
  | { "endpoint": EndpointItemConfigurationModel }
  | { "component": ComponentItemConfigurationModel }
  | { "schema": SchemaItemConfigurationModel };

/**
 * @category Type
 */
export type ItemHttpRequestConfiguration = { requestParts: HttpRequestParts };

/**
 * @category Type
 */
export type ItemRequestConfigurationModel = { "http": ItemHttpRequestConfiguration };

/**
 * @category Type
 */
export type PathParamItem = {
  key: string;
  value: Expression;
  order?: number;
  desc?: string;
  disabled: boolean;
  options: PathParamOptions;
};

/**
 * @category Type
 */
export type PathParamOptions = { propagate: boolean };

/**
 * @category Type
 */
export type QueryParamItem = {
  key: string;
  value: Expression;
  order?: number;
  desc?: string;
  disabled: boolean;
  options: QueryParamOptions;
};

/**
 * @category Type
 */
export type QueryParamOptions = { propagate: boolean };

/**
 * @category Type
 */
export type RawBodyType = { "text": string } | { "json": string } | { "html": string } | { "xml": string };

/**
 * @category Type
 */
export type RequestBody =
  | { "raw": RawBodyType }
  | { "formData": Array<FormDataItem> }
  | { "urlEncoded": Array<UrlEncodedItem> }
  | { "binary": string };

/**
 * @category Type
 */
export type RequestDirConfigurationModel = { "http": DirHttpConfigurationModel };

/**
 * @category Type
 */
export type SchemaDirConfigurationModel = Record<string, never>;

/**
 * @category Type
 */
export type SchemaItemConfigurationModel = Record<string, never>;

/**
 * @category Type
 */
export type UpdateDirEntryParams = {
  id: string;
  /**
   * If provided, the directory will move to the new path
   * For example, if the new path is "requests/folder/", the name is "group"
   * The new relative path of the directory folder will be "requests/folder/group"
   */
  path?: string;
  name?: string;
  order?: number;
  expanded?: boolean;
};

/**
 * @category Type
 */
export type UpdateItemEntryParams = {
  id: string;
  /**
   * If provided, the entry will move to the new path
   * For example, if the new path is "requests/folder/", the name is "entry"
   * The new relative path of the entry folder will be "requests/folder/entry"
   */
  path?: string;
  name?: string;
  protocol?: EntryProtocol;
  order?: number;
  expanded?: boolean;
};

/**
 * @category Type
 */
export type UrlEncodedItem = {
  key: string;
  value: string;
  order?: number;
  desc?: string;
  disabled: boolean;
  options: UrlEncodedOptions;
};

/**
 * @category Type
 */
export type UrlEncodedOptions = { propagate: boolean };
