// Generated by ts-to-zod
import { z } from "zod";
import {
  entryIdSchema,
  headerParamItemSchema,
  httpMethodSchema,
  pathChangeKindSchema,
  pathParamItemSchema,
  queryParamItemSchema,
  requestBodySchema,
} from "./types.zod";

export const createRequestDirEntryInputSchema = z.object({
  destination: z.string(),
});

export const streamEntriesByPrefixesInputSchema = z.array(z.string());
export const createRequestDirEntryOutputSchema = z.object({
  changedPaths: z.array(z.tuple([z.string(), entryIdSchema, pathChangeKindSchema])),
});

export const createRequestProtocolSpecificPayloadSchema = z.object({
  "http": z.object({
    method: httpMethodSchema,
    query_params: z.array(queryParamItemSchema),
    path_params: z.array(pathParamItemSchema),
    headers: z.array(headerParamItemSchema),
    body: requestBodySchema.nullable(),
  }),
});

export const createRequestEntryOutputSchema = z.object({
  changedPaths: z.array(z.tuple([z.string(), entryIdSchema, pathChangeKindSchema])),
});

export const deleteRequestDirEntryInputSchema = z.object({
  id: entryIdSchema,
});

export const deleteRequestDirEntryOutputSchema = z.object({
  changedPaths: z.array(z.tuple([z.string(), entryIdSchema, pathChangeKindSchema])),
});

export const deleteRequestEntryInputSchema = z.object({
  id: entryIdSchema,
});

export const deleteRequestEntryOutputSchema = z.object({
  changedPaths: z.array(z.tuple([z.string(), entryIdSchema, pathChangeKindSchema])),
});

export const updateRequestDirEntryInputSchema = z.object({
  id: entryIdSchema,
  name: z.string().optional(),
});

export const updateRequestDirEntryOutputSchema = z.object({
  changedPaths: z.array(z.tuple([z.string(), entryIdSchema, pathChangeKindSchema])),
});

export const updateRequestEntryInputSchema = z.object({
  id: entryIdSchema,
  name: z.string().optional(),
});

export const updateRequestEntryOutputSchema = z.object({
  changedPaths: z.array(z.tuple([z.string(), entryIdSchema, pathChangeKindSchema])),
});

export const createRequestEntryInputSchema = z.object({
  destination: z.string(),
  url: z.string().optional(),
  payload: createRequestProtocolSpecificPayloadSchema.optional(),
});
