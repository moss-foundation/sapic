// Generated by ts-to-zod
import { jsonValueSchema } from "@repo/bindings-utils";
import { z } from "zod";
import {
  classificationSchema,
  entryIdSchema,
  headerParamItemSchema,
  httpMethodSchema,
  pathChangeKindSchema,
  pathParamItemSchema,
  queryParamItemSchema,
  requestBodySchema,
  requestProtocolSchema,
} from "./types.zod";

export const streamEntriesByPrefixesInputSchema = z.array(z.string());
export const createEntryInputSchema = z.object({
  destination: z.string(),
  classification: classificationSchema,
  specification: jsonValueSchema.optional(),
  protocol: requestProtocolSchema.optional(),
  order: z.number().optional(),
  isDir: z.boolean(),
});

export const createEntryOutputSchema = z.object({
  virtualChanges: z.array(z.tuple([z.string(), entryIdSchema, pathChangeKindSchema])),
});

export const createRequestProtocolSpecificPayloadSchema = z.object({
  "http": z.object({
    method: httpMethodSchema,
    query_params: z.array(queryParamItemSchema),
    path_params: z.array(pathParamItemSchema),
    headers: z.array(headerParamItemSchema),
    body: requestBodySchema.optional(),
  }),
});

export const deleteEntryInputSchema = z.object({
  id: entryIdSchema,
});

export const deleteEntryOutputSchema = z.object({
  virtualChanges: z.array(z.tuple([z.string(), entryIdSchema, pathChangeKindSchema])),
});

export const updateEntryInputSchema = z.object({
  id: entryIdSchema,
  name: z.string().optional(),
  classification: classificationSchema.optional(),
  specification: jsonValueSchema.optional(),
  protocol: requestProtocolSchema.optional(),
  order: z.number().optional(),
});

export const updateEntryOutputSchema = z.object({
  virtualChanges: z.array(z.tuple([z.string(), entryIdSchema, pathChangeKindSchema])),
});
