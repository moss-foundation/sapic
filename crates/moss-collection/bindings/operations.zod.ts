// Generated by ts-to-zod
import { z } from "zod";
import { entryProtocolSchema } from "./primitives.zod";
import {
  componentDirConfigurationModelSchema,
  componentItemConfigurationModelSchema,
  endpointDirConfigurationModelSchema,
  endpointItemConfigurationModelSchema,
  requestDirConfigurationModelSchema,
  requestItemConfigurationModelSchema,
  schemaDirConfigurationModelSchema,
  schemaItemConfigurationModelSchema,
} from "./types.zod";

export const createEntryOutputSchema = z.object({
  id: z.string(),
});

export const deleteEntryInputSchema = z.object({
  id: z.string(),
  path: z.string(),
});

export const deleteEntryOutputSchema = z.record(z.never());

export const streamEntriesOutputSchema = z.record(z.never());

export const updateDirEntryInputSchema = z.object({
  id: z.string(),
  name: z.string().optional(),
  order: z.number().optional(),
});

export const updateEntryOutputSchema = z.record(z.never());
export const createDirEntryInputSchema = z
  .object({
    path: z.string(),
    name: z.string(),
    order: z.number().optional(),
  })
  .and(
    z.union([
      z.object({
        "request": requestDirConfigurationModelSchema,
      }),
      z.object({
        "endpoint": endpointDirConfigurationModelSchema,
      }),
      z.object({
        "component": componentDirConfigurationModelSchema,
      }),
      z.object({
        "schema": schemaDirConfigurationModelSchema,
      }),
    ])
  );

export const createItemEntryInputSchema = z
  .object({
    path: z.string(),
    name: z.string(),
    order: z.number().optional(),
  })
  .and(
    z.union([
      z.object({
        "request": requestItemConfigurationModelSchema,
      }),
      z.object({
        "endpoint": endpointItemConfigurationModelSchema,
      }),
      z.object({
        "component": componentItemConfigurationModelSchema,
      }),
      z.object({
        "schema": schemaItemConfigurationModelSchema,
      }),
    ])
  );

export const updateItemEntryInputSchema = z.object({
  id: z.string(),
  name: z.string().optional(),
  protocol: entryProtocolSchema.optional(),
  order: z.number().optional(),
});

export const createEntryInputSchema = z.union([
  z.object({
    "item": createItemEntryInputSchema,
  }),
  z.object({
    "dir": createDirEntryInputSchema,
  }),
]);

export const updateEntryInputSchema = z.union([
  z.object({
    "item": updateItemEntryInputSchema,
  }),
  z.object({
    "dir": updateDirEntryInputSchema,
  }),
]);
