// Generated by ts-to-zod
import { changeJsonValueSchema, changeStringSchema, jsonValueSchema } from "@repo/moss-bindingutils";
import { z } from "zod";
import { resourceClassSchema, resourcePathSchema, resourceProtocolSchema } from "./primitives.zod";

export const formDataParamOptionsSchema = z.object({
  disabled: z.boolean(),
  propagate: z.boolean(),
});

export const headerParamOptionsSchema = z.object({
  disabled: z.boolean(),
  propagate: z.boolean(),
});

export const pathParamOptionsSchema = z.object({
  disabled: z.boolean(),
  propagate: z.boolean(),
});

export const queryParamOptionsSchema = z.object({
  disabled: z.boolean(),
  propagate: z.boolean(),
});

export const urlencodedParamOptionsSchema = z.object({
  disabled: z.boolean(),
  propagate: z.boolean(),
});

export const updateDirResourceParamsSchema = z.object({
  id: z.string(),
  path: z.string().optional(),
  name: z.string().optional(),
  order: z.number().optional(),
  expanded: z.boolean().optional(),
});

export const updateHeaderParamOptionsSchema = z.object({
  disabled: z.boolean().optional(),
  propagate: z.boolean().optional(),
});

export const updatePathParamOptionsSchema = z.object({
  disabled: z.boolean().optional(),
  propagate: z.boolean().optional(),
});

export const updateQueryParamOptionsSchema = z.object({
  disabled: z.boolean().optional(),
  propagate: z.boolean().optional(),
});

export const vcsOperationSchema = z.union([
  z.object({
    "COMMIT": z.object({
      message: z.string(),
      paths: z.array(z.string()),
      push: z.boolean(),
    }),
  }),
  z.object({
    "DISCARD": z.object({
      paths: z.array(z.string()),
    }),
  }),
  z.literal("PUSH"),
  z.literal("PULL"),
  z.literal("FETCH"),
]);
export const addUrlencodedParamParamsSchema = z.object({
  name: z.string(),
  value: jsonValueSchema,
  order: z.number(),
  description: z.string().optional(),
  options: urlencodedParamOptionsSchema,
  id: z.string().optional(),
});

export const addFormDataParamParamsSchema = z.object({
  name: z.string(),
  value: jsonValueSchema,
  order: z.number(),
  description: z.string().optional(),
  options: formDataParamOptionsSchema,
  id: z.string().optional(),
});

export const addHeaderParamsSchema = z.object({
  name: z.string(),
  value: jsonValueSchema,
  order: z.number(),
  description: z.string().optional(),
  options: headerParamOptionsSchema,
});

export const addPathParamParamsSchema = z.object({
  name: z.string(),
  value: jsonValueSchema,
  order: z.number(),
  description: z.string().optional(),
  options: pathParamOptionsSchema,
});

export const addQueryParamParamsSchema = z.object({
  name: z.string(),
  value: jsonValueSchema,
  order: z.number(),
  description: z.string().optional(),
  options: queryParamOptionsSchema,
});

export const afterUpdateDirResourceDescriptionSchema = z.object({
  id: z.string(),
  path: resourcePathSchema,
});

export const afterUpdateItemResourceDescriptionSchema = z.object({
  id: z.string(),
  path: resourcePathSchema,
});

export const urlencodedParamInfoSchema = z.object({
  id: z.string(),
  name: z.string(),
  value: jsonValueSchema,
  description: z.string().optional(),
  disabled: z.boolean(),
  propagate: z.boolean(),
  order: z.number().optional(),
});

export const formDataParamInfoSchema = z.object({
  id: z.string(),
  name: z.string(),
  value: jsonValueSchema,
  description: z.string().optional(),
  disabled: z.boolean(),
  propagate: z.boolean(),
  order: z.number().optional(),
});

export const createDirResourceParamsSchema = z.object({
  path: z.string(),
  class: resourceClassSchema,
  name: z.string(),
  order: z.number(),
});

export const addBodyParamsSchema = z.union([
  z.object({
    "text": z.string(),
  }),
  z.object({
    "json": jsonValueSchema,
  }),
  z.object({
    "xml": z.string(),
  }),
  z.object({
    "binary": z.string(),
  }),
  z.object({
    "urlencoded": z.array(addUrlencodedParamParamsSchema),
  }),
  z.object({
    "formData": z.array(addFormDataParamParamsSchema),
  }),
]);

export const headerInfoSchema = z.object({
  id: z.string(),
  name: z.string(),
  value: jsonValueSchema,
  description: z.string().optional(),
  disabled: z.boolean(),
  propagate: z.boolean(),
  order: z.number().optional(),
});

export const pathParamInfoSchema = z.object({
  id: z.string(),
  name: z.string(),
  value: jsonValueSchema,
  description: z.string().optional(),
  disabled: z.boolean(),
  propagate: z.boolean(),
  order: z.number().optional(),
});

export const queryParamInfoSchema = z.object({
  id: z.string(),
  name: z.string(),
  value: jsonValueSchema,
  description: z.string().optional(),
  disabled: z.boolean(),
  propagate: z.boolean(),
  order: z.number().optional(),
});

export const updateUrlencodedParamParamsSchema = z.object({
  id: z.string(),
  name: z.string().optional(),
  value: changeJsonValueSchema.optional(),
  order: z.number().optional(),
  description: changeStringSchema.optional(),
  options: urlencodedParamOptionsSchema.optional(),
});

export const updateFormDataParamParamsSchema = z.object({
  id: z.string(),
  name: z.string().optional(),
  value: changeJsonValueSchema.optional(),
  order: z.number().optional(),
  description: changeStringSchema.optional(),
  options: formDataParamOptionsSchema.optional(),
});

export const updateHeaderParamsSchema = z.object({
  id: z.string(),
  name: z.string().optional(),
  value: changeJsonValueSchema.optional(),
  order: z.number().optional(),
  description: changeStringSchema.optional(),
  options: headerParamOptionsSchema.optional(),
});

export const updatePathParamParamsSchema = z.object({
  id: z.string(),
  name: z.string().optional(),
  value: changeJsonValueSchema.optional(),
  order: z.number().optional(),
  description: changeStringSchema.optional(),
  options: pathParamOptionsSchema.optional(),
});

export const updateQueryParamParamsSchema = z.object({
  id: z.string(),
  name: z.string().optional(),
  value: changeJsonValueSchema.optional(),
  order: z.number().optional(),
  description: changeStringSchema.optional(),
  options: queryParamOptionsSchema.optional(),
});

export const updateBodyParamsSchema = z.union([
  z.literal("remove"),
  z.object({
    "text": z.string(),
  }),
  z.object({
    "json": jsonValueSchema,
  }),
  z.object({
    "xml": z.string(),
  }),
  z.object({
    "binary": z.string(),
  }),
  z.object({
    "urlencoded": z.object({
      params_to_add: z.array(addUrlencodedParamParamsSchema),
      params_to_update: z.array(updateUrlencodedParamParamsSchema),
      params_to_remove: z.array(z.string()),
    }),
  }),
  z.object({
    "formData": z.object({
      params_to_add: z.array(addFormDataParamParamsSchema),
      params_to_update: z.array(updateFormDataParamParamsSchema),
      params_to_remove: z.array(z.string()),
    }),
  }),
]);

export const bodyInfoSchema = z.union([
  z.object({
    "text": z.string(),
  }),
  z.object({
    "json": jsonValueSchema,
  }),
  z.object({
    "xml": z.string(),
  }),
  z.object({
    "binary": z.string(),
  }),
  z.object({
    "urlencoded": z.array(urlencodedParamInfoSchema),
  }),
  z.object({
    "formData": z.array(formDataParamInfoSchema),
  }),
]);

export const createItemResourceParamsSchema = z.object({
  path: z.string(),
  class: resourceClassSchema,
  name: z.string(),
  order: z.number(),
  protocol: resourceProtocolSchema.optional(),
  headers: z.array(addHeaderParamsSchema),
  pathParams: z.array(addPathParamParamsSchema),
  queryParams: z.array(addQueryParamParamsSchema),
  body: addBodyParamsSchema.optional(),
});

export const updateItemResourceParamsSchema = z.object({
  id: z.string(),
  path: z.string().optional(),
  name: z.string().optional(),
  order: z.number().optional(),
  expanded: z.boolean().optional(),
  protocol: resourceProtocolSchema.optional(),
  headersToAdd: z.array(addHeaderParamsSchema),
  headersToUpdate: z.array(updateHeaderParamsSchema),
  headersToRemove: z.array(z.string()),
  pathParamsToAdd: z.array(addPathParamParamsSchema),
  pathParamsToUpdate: z.array(updatePathParamParamsSchema),
  pathParamsToRemove: z.array(z.string()),
  queryParamsToAdd: z.array(addQueryParamParamsSchema),
  queryParamsToUpdate: z.array(updateQueryParamParamsSchema),
  queryParamsToRemove: z.array(z.string()),
  body: updateBodyParamsSchema.optional(),
});
