// Generated by ts-to-zod
import { changeJsonValueSchema, changeStringSchema, jsonValueSchema } from "@repo/moss-bindingutils";
import { z } from "zod";
import { entryClassSchema, entryPathSchema, entryProtocolSchema } from "./primitives.zod";

export const headerParamOptionsSchema = z.object({
  disabled: z.boolean(),
  propagate: z.boolean(),
});

export const pathParamOptionsSchema = z.object({
  disabled: z.boolean(),
  propagate: z.boolean(),
});

export const queryParamOptionsSchema = z.object({
  disabled: z.boolean(),
  propagate: z.boolean(),
});

export const updateDirEntryParamsSchema = z.object({
  id: z.string(),
  path: z.string().optional(),
  name: z.string().optional(),
  order: z.number().optional(),
  expanded: z.boolean().optional(),
});

export const updateHeaderParamOptionsSchema = z.object({
  disabled: z.boolean().optional(),
  propagate: z.boolean().optional(),
});

export const updatePathParamOptionsSchema = z.object({
  disabled: z.boolean().optional(),
  propagate: z.boolean().optional(),
});

export const updateQueryParamOptionsSchema = z.object({
  disabled: z.boolean().optional(),
  propagate: z.boolean().optional(),
});

export const vcsOperationSchema = z.union([
  z.object({
    "COMMIT": z.object({
      message: z.string(),
      paths: z.array(z.string()),
      push: z.boolean(),
    }),
  }),
  z.object({
    "DISCARD": z.object({
      paths: z.array(z.string()),
    }),
  }),
  z.literal("PUSH"),
  z.literal("PULL"),
  z.literal("FETCH"),
]);
export const addHeaderParamsSchema = z.object({
  name: z.string(),
  value: jsonValueSchema,
  order: z.number(),
  desc: z.string().optional(),
  options: headerParamOptionsSchema,
});

export const addPathParamParamsSchema = z.object({
  name: z.string(),
  value: jsonValueSchema,
  order: z.number(),
  desc: z.string().optional(),
  options: pathParamOptionsSchema,
});

export const addQueryParamParamsSchema = z.object({
  name: z.string(),
  value: jsonValueSchema,
  order: z.number(),
  desc: z.string().optional(),
  options: queryParamOptionsSchema,
});

export const afterUpdateDirEntryDescriptionSchema = z.object({
  id: z.string(),
  path: entryPathSchema,
});

export const afterUpdateItemEntryDescriptionSchema = z.object({
  id: z.string(),
  path: entryPathSchema,
});

export const createDirEntryParamsSchema = z.object({
  path: z.string(),
  class: entryClassSchema,
  name: z.string(),
  order: z.number(),
});

export const createItemEntryParamsSchema = z.object({
  path: z.string(),
  class: entryClassSchema,
  name: z.string(),
  order: z.number(),
  protocol: entryProtocolSchema.optional(),
  headers: z.array(addHeaderParamsSchema),
  pathParams: z.array(addPathParamParamsSchema),
  queryParams: z.array(addQueryParamParamsSchema),
});

export const headerInfoSchema = z.object({
  id: z.string(),
  name: z.string(),
  value: jsonValueSchema,
  description: z.string().optional(),
  disabled: z.boolean(),
  propagate: z.boolean(),
  order: z.number().optional(),
});

export const pathParamInfoSchema = z.object({
  id: z.string(),
  name: z.string(),
  value: jsonValueSchema,
  description: z.string().optional(),
  disabled: z.boolean(),
  propagate: z.boolean(),
  order: z.number().optional(),
});

export const queryParamInfoSchema = z.object({
  id: z.string(),
  name: z.string(),
  value: jsonValueSchema,
  description: z.string().optional(),
  disabled: z.boolean(),
  propagate: z.boolean(),
  order: z.number().optional(),
});

export const updateHeaderParamsSchema = z.object({
  id: z.string(),
  name: z.string().optional(),
  value: changeJsonValueSchema.optional(),
  order: z.number().optional(),
  desc: changeStringSchema.optional(),
  options: headerParamOptionsSchema.optional(),
});

export const updatePathParamParamsSchema = z.object({
  id: z.string(),
  name: z.string().optional(),
  value: changeJsonValueSchema.optional(),
  order: z.number().optional(),
  desc: changeStringSchema.optional(),
  options: pathParamOptionsSchema.optional(),
});

export const updateQueryParamParamsSchema = z.object({
  id: z.string(),
  name: z.string().optional(),
  value: changeJsonValueSchema.optional(),
  order: z.number().optional(),
  desc: changeStringSchema.optional(),
  options: queryParamOptionsSchema.optional(),
});

export const updateItemEntryParamsSchema = z.object({
  id: z.string(),
  path: z.string().optional(),
  name: z.string().optional(),
  order: z.number().optional(),
  expanded: z.boolean().optional(),
  protocol: entryProtocolSchema.optional(),
  headersToAdd: z.array(addHeaderParamsSchema),
  headersToUpdate: z.array(updateHeaderParamsSchema),
  headersToRemove: z.array(z.string()),
  pathParamsToAdd: z.array(addPathParamParamsSchema),
  pathParamsToUpdate: z.array(updatePathParamParamsSchema),
  pathParamsToRemove: z.array(z.string()),
  queryParamsToAdd: z.array(addQueryParamParamsSchema),
  queryParamsToUpdate: z.array(updateQueryParamParamsSchema),
  queryParamsToRemove: z.array(z.string()),
});
