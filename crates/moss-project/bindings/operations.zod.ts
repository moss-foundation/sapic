// Generated by ts-to-zod
import { z } from "zod";
import { resourceClassSchema, resourceKindSchema, resourceProtocolSchema } from "./primitives.zod";
import {
  afterUpdateDirResourceDescriptionSchema,
  afterUpdateItemResourceDescriptionSchema,
  bodyInfoSchema,
  createDirResourceParamsSchema,
  createItemResourceParamsSchema,
  headerInfoSchema,
  pathParamInfoSchema,
  queryParamInfoSchema,
  updateDirResourceParamsSchema,
  updateItemResourceParamsSchema,
  vcsOperationSchema,
} from "./types.zod";

export const batchCreateResourceOutputSchema = z.object({
  ids: z.array(z.string()),
});

export const batchUpdateResourceOutputSchema = z.record(z.string(), z.never());

export const createResourceOutputSchema = z.object({
  id: z.string(),
});

export const deleteResourceInputSchema = z.object({
  id: z.string(),
});

export const deleteResourceOutputSchema = z.object({
  id: z.string(),
});

export const executeVcsOperationOutputSchema = z.record(z.string(), z.never());

export const streamResourcesInputSchema = z.union([
  z.literal("LOAD_ROOT"),
  z.object({
    "RELOAD_PATH": z.string(),
  }),
]);

export const streamResourcesOutputSchema = z.record(z.string(), z.never());
export const batchCreateResourceKindSchema = z.union([
  z.object({
    "ITEM": createItemResourceParamsSchema,
  }),
  z.object({
    "DIR": createDirResourceParamsSchema,
  }),
]);

export const batchUpdateResourceKindSchema = z.union([
  z.object({
    "ITEM": updateItemResourceParamsSchema,
  }),
  z.object({
    "DIR": updateDirResourceParamsSchema,
  }),
]);

export const batchUpdateResourceOutputKindSchema = z.union([
  z.object({
    "ITEM": afterUpdateItemResourceDescriptionSchema,
  }),
  z.object({
    "DIR": afterUpdateDirResourceDescriptionSchema,
  }),
]);

export const createResourceInputSchema = z.union([
  z.object({
    "ITEM": createItemResourceParamsSchema,
  }),
  z.object({
    "DIR": createDirResourceParamsSchema,
  }),
]);

export const describeResourceOutputSchema = z.object({
  name: z.string(),
  class: resourceClassSchema,
  kind: resourceKindSchema,
  protocol: resourceProtocolSchema.optional(),
  url: z.string().optional(),
  headers: z.array(headerInfoSchema),
  pathParams: z.array(pathParamInfoSchema),
  queryParams: z.array(queryParamInfoSchema),
  body: bodyInfoSchema.optional(),
});

export const executeVcsOperationInputSchema = z.object({
  operation: vcsOperationSchema,
});

export const updateResourceInputSchema = z.union([
  z.object({
    "ITEM": updateItemResourceParamsSchema,
  }),
  z.object({
    "DIR": updateDirResourceParamsSchema,
  }),
]);

export const updateResourceOutputSchema = z.union([
  z.object({
    "ITEM": afterUpdateItemResourceDescriptionSchema,
  }),
  z.object({
    "DIR": afterUpdateDirResourceDescriptionSchema,
  }),
]);

export const batchCreateResourceInputSchema = z.object({
  resources: z.array(batchCreateResourceKindSchema),
});

export const batchUpdateResourceInputSchema = z.object({
  resources: z.array(batchUpdateResourceKindSchema),
});
