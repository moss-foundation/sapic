name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always
  CARGO_PROFILE_DEV_DEBUG: 0
  CARGO_INCREMENTAL: 0
  RUSTC_WRAPPER: sccache

jobs:
  check-modified-files:
    runs-on: ubuntu-latest
    outputs:
      node: ${{ steps.node.outputs.any_changed }}
      rust: ${{ steps.rust.outputs.any_changed }}
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: audit

      - name: Check out code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Get all changed Rust files
        id: rust
        uses: tj-actions/changed-files@823fcebdb31bb35fdf2229d9f769b400309430d0 # v46.0.3
        with:
          files: |
            **.rs
            Cargo.toml
            Cargo.lock
          files_ignore: |
            .github/**

      - name: Get all changed NodeJS files
        id: node
        uses: tj-actions/changed-files@823fcebdb31bb35fdf2229d9f769b400309430d0 # v46.0.3
        with:
          files: |
            **.ts
            **.tsx
            **.js
            **.jsx
            package.json
            pnpm-lock.yaml

  check-modified-models:
    name: Check Modified Models
    needs: check-modified-files
    if: ${{ needs.check-modified-files.outputs.rust == 'true' }}
    runs-on: ubuntu-latest
    outputs:
      UPDATED_MODELS: ${{steps.output-models.outputs.UPDATED_MODELS}}
    timeout-minutes: 30
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: audit

      - name: Checkout Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0        # full history, needed for diff
          ref: ${{ github.head_ref }}

      - name: Check Modified Models
        id: output-models
        run: python3 .github/scripts/check_modified_models.py

  # Single job to build Rust cache - all other Rust jobs depend on this
  rust-build-cache:
    name: Build Rust Cache
    needs: check-modified-files
    if: ${{ needs.check-modified-files.outputs.rust == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: audit

      - name: Checkout Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Use Linux Apt Cache
        uses: awalsh128/cache-apt-pkgs-action@7ca5f46d061ad9aa95863cd9b214dd48edef361d # latest
        with:
          packages: |
            libwebkit2gtk-4.1-dev
            libappindicator3-dev
            librsvg2-dev
            patchelf

      - name: Use Rust Cache (Primary - Read/Write)
        uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0
        with:
          cache-all-crates: true
          shared-key: "build"

      - name: Setup sccache
        uses: mozilla-actions/sccache-action@v0.0.3

      - name: Build dependencies and internal crates
        run: |
          echo "Fetching all dependencies..."
          cargo fetch --locked
          
  check-bindings:
    name: Check Bindings
    needs: [check-modified-models, rust-build-cache]
    if: ${{ needs.check-modified-models.outputs.UPDATED_MODELS != '[]' }}
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        crate: ${{fromJSON(needs.check-modified-models.outputs.UPDATED_MODELS)}}
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: audit

      - name: Checkout Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install PNPM
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4.1.0

      - name: Use Linux Apt Cache
        uses: awalsh128/cache-apt-pkgs-action@7ca5f46d061ad9aa95863cd9b214dd48edef361d # latest
        with:
          packages: |
            libwebkit2gtk-4.1-dev
            libappindicator3-dev
            librsvg2-dev
            patchelf

      - name: Use Rust Cache (Read-Only)
        uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0
        with:
          cache-all-crates: true
          shared-key: "build"
          save-if: false

      - name: Setup sccache
        uses: mozilla-actions/sccache-action@v0.0.3

      - name: Install gen-bindings dependencies
        run: cd tools/gen-bindings && pnpm install --frozen-lockfile

      - name: Verify that bindings are updated
        run: |
          make gen-${{matrix.crate}}-bindings
          git diff --exit-code -- crates/moss-${{matrix.crate}}/bindings/**
  
  # Optimized Node.js workflows - single job with matrix for tasks
  node-workflows:
    name: Node.js - ${{ matrix.task.name }}
    needs: check-modified-files
    if: ${{ needs.check-modified-files.outputs.node == 'true' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        task:
          - name: Lint
            command: pnpm run lint -- --quiet

          - name: Test Packages
            command: pnpm run test --project packages

          - name: Test Moss-Tabs
            command: pnpm run test --project moss-tabs

          - name: Test Desktop
            command: pnpm run test --project desktop

    timeout-minutes: 30
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: audit

      - name: Checkout Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install PNPM
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4.1.0

      - name: Set Up Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version-file: "package.json"
          cache: "pnpm"

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Dependencies for desktop
        run: cd view/desktop && pnpm install --frozen-lockfile --force

      - name: Install Playwright Browsers
        run: pnpm exec playwright install chromium --with-deps

      - name: Cache optional Playwright paths
        uses: actions/cache@d4323d4df104b026a6aa633fdb11d772146be0bf # v4.2.2
        with:
          path: |
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/pnpm-lock.yaml', '**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-${{ hashFiles('**/pnpm-lock.yaml') }}
            ${{ runner.os }}-playwright-

      - name: Setup uv
        uses: astral-sh/setup-uv@bd01e18f51369d5a26f1651c3cb451d3417e3bba # v6.3.1

      - name: Cache UV packages
        uses: actions/cache@d4323d4df104b026a6aa633fdb11d772146be0bf # v4.2.2
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml', '**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      - name: Build Icons
        run: make gen-icons

      - name: Execute Task - ${{ matrix.task.name }}
        run: ${{ matrix.task.command }}
