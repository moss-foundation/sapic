name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always
  CARGO_PROFILE_DEV_DEBUG: 0
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10
  CARGO_NET_GIT_FETCH_WITH_CLI: true

jobs:
  check-modified-files:
    runs-on: ubuntu-latest
    outputs:
      node: ${{ steps.node.outputs.any_changed }}
      rust: ${{ steps.rust.outputs.any_changed }}
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: audit

      - name: Check out code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Get all changed Rust files
        id: rust
        uses: tj-actions/changed-files@823fcebdb31bb35fdf2229d9f769b400309430d0 # v46.0.3
        with:
          files: |
            **.rs
            Cargo.toml
          files_ignore: |
            .github/**

      - name: Get all changed NodeJS files
        id: node
        uses: tj-actions/changed-files@823fcebdb31bb35fdf2229d9f769b400309430d0 # v46.0.3
        with:
          files: |
            **.ts
            **.tsx
            **.js
            **.jsx
            package.json

  setup-rust:
    name: Setup Rust Environment
    needs: check-modified-files
    if: ${{ needs.check-modified-files.outputs.rust == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Cache Rust Setup
        id: cache-rust-setup
        uses: actions/cache@d4323d4df104b026a6aa633fdb11d772146be0bf # v4.2.2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ~/.rustup/
          key: ${{ runner.os }}-rust-setup-${{ hashFiles('rust-toolchain.toml', '**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-rust-setup-

      - name: Setup Rust toolchain
        if: steps.cache-rust-setup.outputs.cache-hit != 'true'
        uses: dtolnay/rust-toolchain@4305c38b25d97ef35a8ad1f985ccf2d2242004f2 # stable

      - name: Install sccache
        if: steps.cache-rust-setup.outputs.cache-hit != 'true'
        uses: taiki-e/install-action@56ab7930c591507f833cbaed864d201386d518a8 # v2.44.13
        with:
          tool: sccache

  check-modified-models:
    name: Check Modified Models
    needs: check-modified-files
    if: ${{ needs.check-modified-files.outputs.rust == 'true' }}
    runs-on: ubuntu-latest
    outputs:
      UPDATED_MODELS: ${{steps.output-models.outputs.UPDATED_MODELS}}
    timeout-minutes: 30
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: audit

      - name: Checkout Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0        # full history, needed for diff
          ref: ${{ github.head_ref }}

      - name: Check Modified Models
        id: output-models
        run: python3 .github/scripts/check_modified_models.py


  check-all-bindings:
    name: Check All Bindings
    needs: [check-modified-models, setup-rust]
    if: ${{ needs.check-modified-models.outputs.UPDATED_MODELS != '[]' }}
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      RUSTC_WRAPPER: sccache
      SCCACHE_GHA_ENABLED: true
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: audit

      - name: Checkout Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install PNPM
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4.1.0

      - name: Install gen-bindings dependencies
        run: cd tools/gen-bindings && pnpm install

      - name: Restore Rust Setup
        uses: actions/cache/restore@d4323d4df104b026a6aa633fdb11d772146be0bf # v4.2.2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ~/.rustup/
          key: ${{ runner.os }}-rust-setup-${{ hashFiles('rust-toolchain.toml', '**/Cargo.lock') }}
          fail-on-cache-miss: true

      - name: Configure sccache
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: Use Linux Apt Cache
        uses: awalsh128/cache-apt-pkgs-action@7ca5f46d061ad9aa95863cd9b214dd48edef361d # latest
        with:
          packages: |
            libwebkit2gtk-4.1-dev
            libappindicator3-dev
            librsvg2-dev
            patchelf

      - name: Use Rust Cache
        uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0
        with:
          cache-all-crates: "true"
          save-if: false

      - name: Verify all bindings in parallel
        run: |
          MODELS='${{ needs.check-modified-models.outputs.UPDATED_MODELS }}'
          echo "$MODELS" | jq -r '.[]' | while read -r model; do
            echo "Checking bindings for $model"
            make gen-$model-bindings &
          done
          wait
          git diff --exit-code -- crates/moss-*/bindings/**
  

  rust-all-checks:
    name: Rust Tests and Checks
    needs: [check-modified-files, setup-rust]
    if: ${{ needs.check-modified-files.outputs.rust == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      RUSTC_WRAPPER: sccache
      SCCACHE_GHA_ENABLED: true
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: audit

      - name: Checkout Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Restore Rust Setup
        uses: actions/cache/restore@d4323d4df104b026a6aa633fdb11d772146be0bf # v4.2.2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ~/.rustup/
          key: ${{ runner.os }}-rust-setup-${{ hashFiles('rust-toolchain.toml', '**/Cargo.lock') }}
          fail-on-cache-miss: true

      - name: Configure sccache
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: Use Linux Apt Cache
        uses: awalsh128/cache-apt-pkgs-action@7ca5f46d061ad9aa95863cd9b214dd48edef361d # latest
        with:
          packages: |
            libwebkit2gtk-4.1-dev
            libappindicator3-dev
            librsvg2-dev
            patchelf

      - name: Use Rust Cache
        uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0
        with:
          cache-all-crates: "true"

      - name: Workspace Audit
        run: |
          cd "${GITHUB_WORKSPACE}/tools/xtask"
          cargo -q run -- --fail-fast audit

      - name: Run All Tests in Parallel
        run: |
          cargo test --workspace --all-targets --all-features --no-fail-fast

      - name: Show sccache stats
        run: sccache --show-stats


  rust-lint-all:
    name: Rust Lint Check All
    needs: [check-modified-files, setup-rust]
    if: ${{ needs.check-modified-files.outputs.rust == 'true' && (github.event_name != 'pull_request' || github.event.pull_request.draft == false) }}
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      RUSTC_WRAPPER: sccache
      SCCACHE_GHA_ENABLED: true
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: audit

      - name: Checkout Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Restore Rust Setup
        uses: actions/cache/restore@d4323d4df104b026a6aa633fdb11d772146be0bf # v4.2.2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ~/.rustup/
          key: ${{ runner.os }}-rust-setup-${{ hashFiles('rust-toolchain.toml', '**/Cargo.lock') }}
          fail-on-cache-miss: true

      - name: Configure sccache
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: Use Linux Apt Cache
        uses: awalsh128/cache-apt-pkgs-action@7ca5f46d061ad9aa95863cd9b214dd48edef361d # latest
        with:
          packages: |
            libwebkit2gtk-4.1-dev
            libappindicator3-dev
            librsvg2-dev
            patchelf

      - name: Use Rust Cache
        uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0
        with:
          cache-all-crates: "true"
          save-if: false

      - name: Install Grit
        run: |
          curl -fsSL https://docs.grit.io/install | bash
          grit init

      - name: Check All Rust Warnings
        env:
          RUSTFLAGS: "-D warnings"
        run: |
          cargo check --workspace --all-targets --all-features

      - name: Run Clippy
        run: |
          cargo clippy --workspace --all-targets --all-features -- -D warnings

      - name: Rust Grit Check All
        run: |
          grit apply --dry-run
  

  node-workflows:
    name: Node.js Workflows - ${{ matrix.task.name }}
    needs: check-modified-files
    if: ${{ needs.check-modified-files.outputs.node == 'true' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        task:
          - name: Lint
            command: |
              pnpm run lint -- --quiet

          - name: Test Packages
            command: pnpm run test --project packages

          - name: Test Moss-Tabs
            command: pnpm run test --project moss-tabs

          - name: Test Desktop
            command: pnpm run test --project desktop

    timeout-minutes: 30
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: audit

      - name: Checkout Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install PNPM
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4.1.0

      - name: Set Up Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version-file: "package.json"
          cache: "pnpm"

      - name: Install Dependencies
        run: pnpm install

      - name: Install Dependencies for desktop # TODO: This is a hack to get around eslint issues
        run: cd view/desktop && pnpm install --force

      - name: Install Playwright Browsers
        run: pnpm exec playwright install chromium --with-deps

      - name: Cache optional Playwright paths
        uses: actions/cache@d4323d4df104b026a6aa633fdb11d772146be0bf # v4.2.2
        with:
          path: |
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('package-lock.json', 'pnpm-lock.yaml') }}

      - name: Setup uv
        uses: astral-sh/setup-uv@bd01e18f51369d5a26f1651c3cb451d3417e3bba # v6.3.1

      - name: Build Icons
        run: make gen-icons

      - name: Execute Task - ${{ matrix.task.name }}
        run: ${{ matrix.task.command }}
