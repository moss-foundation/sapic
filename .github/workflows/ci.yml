name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always
  CARGO_PROFILE_DEV_DEBUG: 0

jobs:
  check-modified-files:
    runs-on: ubuntu-latest
    outputs:
      rust: ${{ steps.changed-files.outputs.rust_any_changed }}
      node: ${{ steps.changed-files.outputs.node_any_changed }}
      rust-lib: ${{ steps.changed-files.outputs.rust_libs_any_changed }}
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Check out code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          # To make `since_last_remote_commit` work on newly created PR
          # https://github.com/tj-actions/changed-files/issues/2153
          fetch-depth: 0

      - name: Get all changed files
        id: changed-files
        uses: tj-actions/changed-files@24d32ffd492484c1d75e0c0b894501ddb9d30d62 # v47.0.0
        with:
          # Only consider changed files in the latest commit when the PR is in draft
          since_last_remote_commit: ${{ github.event_name == 'pull_request' && github.event.pull_request.draft == true }}
          files_yaml: |
            rust:
              - '**/*.rs'
              - '**/Cargo.toml'
            node:
              - '**/*.ts'
              - '**/*.tsx'
              - '**/*.js'
              - '**/*.jsx'
              - '**/package.json'
            rust_libs:
              - "libs/**/*.rs"
              - "libs/**/Cargo.toml"


  check-modified-models:
    name: Check Modified Models
    needs: check-modified-files
    if: ${{ needs.check-modified-files.outputs.rust == 'true' && github.ref_name != 'main' }}
    runs-on: ubuntu-latest
    outputs:
      UPDATED_MODELS: ${{steps.output-models.outputs.UPDATED_MODELS}}
    timeout-minutes: 30
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Checkout Code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0 # full history, needed for diff
          ref: ${{ github.head_ref }}

      - name: Check Modified Models
        id: output-models
        run: python3 .github/scripts/check_modified_models.py

  check-bindings:
    name: Check Bindings
    needs: check-modified-models
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        crate: ${{fromJSON(needs.check-modified-models.outputs.UPDATED_MODELS)}}
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Checkout Code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Install PNPM
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4.1.0

      - name: Install gen-bindings dependencies
        run: cd tools/gen-bindings && pnpm install

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@4305c38b25d97ef35a8ad1f985ccf2d2242004f2 # stable

      - name: Use Linux Apt Cache
        uses: awalsh128/cache-apt-pkgs-action@7ca5f46d061ad9aa95863cd9b214dd48edef361d # latest
        with:
          packages: |
            libwebkit2gtk-4.1-dev
            libappindicator3-dev
            librsvg2-dev
            patchelf
            jsonnet

      - name: Use Rust Cache
        uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0
        with:
          cache-all-crates: "true"

      - name: Verify that bindings are updated
        run: |
          make gen-${{matrix.crate}}-bindings
          git diff --exit-code -- crates/moss-${{matrix.crate}}/bindings/**

  rust-general-workflows:
    name: Rust General Workflows
    needs: check-modified-files
    if: ${{ needs.check-modified-files.outputs.rust == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Checkout Code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@4305c38b25d97ef35a8ad1f985ccf2d2242004f2 # stable

      - name: Use Linux Apt Cache
        uses: awalsh128/cache-apt-pkgs-action@7ca5f46d061ad9aa95863cd9b214dd48edef361d # latest
        with:
          packages: |
            libwebkit2gtk-4.1-dev
            libappindicator3-dev
            librsvg2-dev
            patchelf
            jsonnet

      - name: Use Rust Cache
        uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0
        with:
          cache-all-crates: "true"

      - name: Check the application compiles
        run: |
          cd "${GITHUB_WORKSPACE}/view/desktop/bin"
          cargo check

      - name: Workspace Audit
        run: |
          cd "${GITHUB_WORKSPACE}/tools/xtask"
          cargo -q run -- --fail-fast audit

  rust-tests:
    name: Rust Tests - ${{ matrix.package }}
    needs: check-modified-files
    if: ${{ needs.check-modified-files.outputs.rust == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        package:
          - moss_git
          - moss_git_hosting_provider
          - moss_api
          - moss_text
          - moss_project
          - moss_app
          - moss_applib
          - moss_db
          - moss_fs
          - moss_keyring
          - moss_vault
          - moss_workspace
          - moss_environment
          - moss_testutils
          - moss_common
          - moss_storage
          - moss_activity_broadcaster
          - moss_bindingutils
          - moss_hcl
          - moss_logging
          - moss_user
          - moss_edit
          - moss_server_api
          - moss_extension
          - moss_extension_points
          - moss_theme
          - moss_configuration
          - moss_language
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Checkout Code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@4305c38b25d97ef35a8ad1f985ccf2d2242004f2 # stable

      - name: Use Linux Apt Cache
        uses: awalsh128/cache-apt-pkgs-action@7ca5f46d061ad9aa95863cd9b214dd48edef361d # latest
        with:
          packages: |
            libwebkit2gtk-4.1-dev
            libappindicator3-dev
            librsvg2-dev
            patchelf
            jsonnet

      - name: Use Rust Cache
        uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0
        with:
          cache-all-crates: "true"

      - name: Run Tests - ${{ matrix.package }}
        run: cargo test -p ${{ matrix.package }} --features integration-tests

  rust-library-tests:
    name: Rust Library Tests - ${{ matrix.package }}
    needs: check-modified-files
    if: ${{ needs.check-modified-files.outputs.rust-lib != '[]'}}
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        # If it's a draft, only run test for that library
        # If it's ready, run tests for all libraries
        package: ${{ (github.event.pull_request.draft == true && fromJSON(needs.check-modified-files.outputs.rust-lib)) || fromJSON('["atomic_fs", "joinerror", "static_json"]') }}

    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Checkout Code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@4305c38b25d97ef35a8ad1f985ccf2d2242004f2 # stable

      - name: Use Linux Apt Cache
        uses: awalsh128/cache-apt-pkgs-action@7ca5f46d061ad9aa95863cd9b214dd48edef361d # latest
        with:
          packages: |
            libwebkit2gtk-4.1-dev
            libappindicator3-dev
            librsvg2-dev
            patchelf
            jsonnet

      - name: Use Rust Cache
        uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0
        with:
          cache-all-crates: "true"

      - name: Run Tests - ${{ matrix.package }}
        run: cargo test -p ${{ matrix.package }} --features tests

  # Run Rust Lint Check in each package individually.
  # Right now it includes warnings check and grit check
  # This job is skipped for draft pull requests to allow developers to work
  # without being blocked by warnings during the development process.
  # Warnings checks will run when the PR is marked as ready for review.
  rust-lint-check:
    name: Rust Lint Check
    needs: check-modified-files
    if: ${{ needs.check-modified-files.outputs.rust == 'true' && (github.event_name != 'pull_request' || github.event.pull_request.draft == false) }}
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        package:
          - moss_git
          - moss_git_hosting_provider
          - moss_api
          - moss_text
          - moss_project
          - moss_app
          - moss_applib
          - moss_db
          - moss_fs
          - moss_keyring
          # - moss_vault
          - moss_workspace
          - moss_environment
          - moss_testutils
          - moss_common
          - moss_storage
          - moss_activity_broadcaster
          - desktop
          - moss_bindingutils
          - moss_hcl
          - moss_logging
          - moss_user
          - moss_edit
          - moss_server_api
          - moss_extension
          - moss_extension_points
          - moss_theme
          - moss_configuration
          - moss_language
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Checkout Code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@4305c38b25d97ef35a8ad1f985ccf2d2242004f2 # stable

      - name: Use Linux Apt Cache
        uses: awalsh128/cache-apt-pkgs-action@7ca5f46d061ad9aa95863cd9b214dd48edef361d # latest
        with:
          packages: |
            libwebkit2gtk-4.1-dev
            libappindicator3-dev
            librsvg2-dev
            patchelf
            jsonnet

      - name: Use Rust Cache
        uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0
        with:
          cache-all-crates: "true"

      - name: Install Grit
        run: |
          curl -fsSL https://docs.grit.io/install | bash

      - name: Init Grit
        run: |
          grit init

      - name: Clean cargo cache for warnings check
        run: cargo clean -p ${{ matrix.package }}

      - name: Rust Warnings Check - ${{ matrix.package }}
        run: python3 .github/scripts/rust_warnings_check.py -p ${{ matrix.package }}

      - name: Rust Grit Check - ${{ matrix.package }}
        run: python3 .github/scripts/rust_grit_check.py -p ${{ matrix.package }}

  node-workflows:
    name: Node.js Workflows - ${{ matrix.task.name }}
    needs: check-modified-files
    if: ${{ needs.check-modified-files.outputs.node == 'true' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        task:
          - name: TypeScript types check
            command: cd view/desktop && tsc --noEmit --project tsconfig.json

          - name: Lint
            command: pnpm run lint -- --quiet

          - name: Test Packages
            command: pnpm run test --project packages

          # - name: Test Moss-Tabs
          #   command: pnpm run test --project moss-tabs

          - name: Test Desktop
            command: pnpm run test --project desktop

    timeout-minutes: 30
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Checkout Code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Install PNPM
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4.1.0

      - name: Set Up Node.js
        uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5.0.0
        with:
          node-version-file: "package.json"
          cache: "pnpm"

      - name: Install Dependencies
        run: pnpm install

      - name: Install Dependencies for desktop # TODO: This is a hack to get around eslint issues
        run: cd view/desktop && pnpm install --force

      - name: Install Playwright Browsers
        run: pnpm exec playwright install chromium --with-deps

      - name: Cache optional Playwright paths
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: |
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('package-lock.json', 'pnpm-lock.yaml') }}

      - name: Setup uv
        uses: astral-sh/setup-uv@d0cc045d04ccac9d8b7881df0226f9e82c39688e # v6.8.0

      - name: Build Icons
        run: make gen-icons

      - name: Execute Task - ${{ matrix.task.name }}
        run: ${{ matrix.task.command }}
